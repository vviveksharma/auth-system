definitions:
  models.AssignRoleRequest:
    properties:
      role:
        type: string
    type: object
  models.BadRequestResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad request. Missing or invalid required fields.
        type: string
    type: object
  models.ConflictResponse:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: Conflict. Resource already exists or operation conflicts with current
          state.
        type: string
    type: object
  models.CreateCustomRole:
    properties:
      Permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      description:
        type: string
      display_name:
        type: string
      name:
        type: string
    type: object
  models.InternalServerErrorResponse:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: Internal server error occurred.
        type: string
    type: object
  models.Permission:
    properties:
      description:
        type: string
      methods:
        items:
          type: string
        type: array
      route:
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      email:
        type: string
    type: object
  models.ServiceResponse:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: Operation completed successfully
        type: string
    type: object
  models.StatusUnprocessableEntityResponse:
    properties:
      code:
        example: 422
        type: integer
      message:
        example: Invalid request body format. Please check your JSON syntax and field
          types.
        type: string
    type: object
  models.UnauthorizedResponse:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Unauthorized access. Please provide valid authentication credentials.
        type: string
    type: object
  models.UpdateRolePermissions:
    properties:
      add_permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      remove_permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      role:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  models.UserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UserVerifyOTPRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  models.VerifyRoleRequest:
    properties:
      role_id:
        type: string
      role_name:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token upon successful login.
      parameters:
      - description: User login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token and success message
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Invalid credentials or missing fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "422":
          description: Error while parsing the request body
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: User Login
      tags:
      - Auth
  /refresh-token:
    post:
      description: Logs out the logged in user and invalidates its existing token.
      produces:
      - application/json
      responses:
        "200":
          description: Refreshed JWT token and success message
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Logout the user
      tags:
      - Auth
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieves all roles from the system. Optionally, you can filter
        roles by type using the 'type' query parameter. If not provided, the default
        type is used.
      parameters:
      - description: Role type to filter (e.g., 'admin', 'user', 'default'). If not
          provided, defaults to 'default'.
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Roles fetched successfully. Data contains the list of roles.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while fetching roles.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: List all roles
      tags:
      - Roles
  /roles/:
    post:
      consumes:
      - application/json
      description: Creates a new custom role with specified routes. Requires a unique
        role name and a list of routes. Returns 422 if the request is invalid, 500
        for internal errors.
      parameters:
      - description: Create Custom Role Request. Requires 'roleName' and 'routes'
          fields.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCustomRole'
      produces:
      - application/json
      responses:
        "200":
          description: Role created successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if 'roleName' or 'routes' are missing
            or invalid.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "422":
          description: Unprocessable Entity. This occurs if the request body cannot
            be parsed.
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while creating the role.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Create custom role
      tags:
      - Roles
  /roles/:id/permissions:
    put:
      consumes:
      - application/json
      description: Adds or removes permissions from a role. Requires role name and
        lists of permissions to add or remove. Returns 422 if the request is invalid,
        500 for internal errors.
      parameters:
      - description: Update Role Permissions Request. Requires 'roleName', 'addPermisions',
          and 'removePermissions'.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRolePermissions'
      produces:
      - application/json
      responses:
        "200":
          description: Role permissions updated successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if required fields are missing or
            invalid.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "422":
          description: Unprocessable Entity. This occurs if the request body cannot
            be parsed.
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while updating permissions.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Update role permissions
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a custom role by its ID. Only custom roles can be deleted;
        system roles are protected. Any users currently assigned this role will need
        to be reassigned before deletion.
      parameters:
      - description: Role ID to delete. Must be a valid UUID format.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if the 'id' path parameter is missing,
            empty, or not a valid UUID format.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "409":
          description: Conflict. This occurs if the role is currently assigned to
            users and cannot be deleted.
          schema:
            $ref: '#/definitions/models.ConflictResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while deleting the role.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Delete custom role
      tags:
      - Roles
  /roles/{id}/disable:
    put:
      consumes:
      - application/json
      description: Disables a role by its ID, preventing it from being assigned to
        new users. Existing users with this role will retain it but new assignments
        are blocked. System roles cannot be disabled.
      parameters:
      - description: Role ID to disable. Must be a valid UUID format.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role disabled successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if the 'id' path parameter is missing,
            empty, or not a valid UUID format.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "409":
          description: Conflict. This occurs if the role is already disabled.
          schema:
            $ref: '#/definitions/models.ConflictResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while disabling the role.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Disable role
      tags:
      - Roles
  /roles/{id}/enable:
    put:
      consumes:
      - application/json
      description: Enables a role by its ID, making it available for assignment to
        users. Only disabled roles can be enabled. System roles are always enabled
        by default.
      parameters:
      - description: Role ID to enable. Must be a valid UUID format.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role enabled successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if the 'id' path parameter is missing,
            empty, or not a valid UUID format.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "409":
          description: Conflict. This occurs if the role is already enabled.
          schema:
            $ref: '#/definitions/models.ConflictResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while enabling the role.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Enable role
      tags:
      - Roles
  /roles/{id}/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all routes and permissions associated with a specific
        role by role ID. This is useful for role management and permission auditing.
        Returns detailed permission structure including HTTP methods and route information.
      parameters:
      - description: Role ID to retrieve permissions for. Must be a valid UUID format.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role permissions retrieved successfully. Data contains the
            detailed permission structure.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if the 'id' path parameter is missing,
            empty, or not a valid UUID format.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while retrieving role permissions.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get role permissions
      tags:
      - Roles
  /roles/verify:
    post:
      consumes:
      - application/json
      description: Verifies if a role exists by roleId and roleName. Returns 404 if
        either is missing or not found, 422 if the request body is invalid.
      parameters:
      - description: Verify Role Request. Requires both 'roleId' and 'roleName'.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role verified successfully.
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad Request. This occurs if either 'roleId' or 'roleName' is
            missing or invalid.
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "422":
          description: Unprocessable Entity. This occurs if the request body cannot
            be parsed.
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error. This occurs if there is an unexpected
            error while verifying the role.
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Verify role
      tags:
      - Roles
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the system using their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Delete a user
      tags:
      - User
    get:
      description: Fetches the details of a user by their unique user ID. This endpoint
        is typically used by admins or services that need to look up users.
      parameters:
      - description: Unique identifier of the user to retrieve
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details successfully retrieved
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User Details by ID
      tags:
      - User
  /user/{id}/role:
    post:
      consumes:
      - application/json
      description: Assigns a specific role to a user identified by their user ID.
        Only users with sufficient privileges (e.g., admins) can perform this action.
      parameters:
      - description: Unique identifier of the user to assign a role
        in: path
        name: id
        required: true
        type: string
      - description: Role assignment details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "422":
          description: Unprocessable entity, invalid input
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Assign Role to User
      tags:
      - User
  /user/details:
    get:
      description: Returns the details of the user currently authenticated via the
        API key or token. This endpoint is useful for profile pages or user dashboards.
      produces:
      - application/json
      responses:
        "200":
          description: User details successfully retrieved
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Authenticated User Details
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Allows the authenticated user to update their profile information
        such as name, email, or other editable fields. Requires authentication.
      parameters:
      - description: Fields to update for the user profile
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User details updated successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "422":
          description: Unprocessable entity, invalid input
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Authenticated User Details
      tags:
      - User
  /user/password/reset:
    post:
      consumes:
      - application/json
      description: Initiates the password reset process for a user by sending a reset
        link or OTP to the user's email.
      parameters:
      - description: Password reset request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset initiated successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "422":
          description: Unprocessable entity, invalid input
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Reset User Password
      tags:
      - User
  /user/password/set:
    post:
      consumes:
      - application/json
      description: Sets a new password for the user after verifying the OTP sent to
        their email. Requires email, OTP, new password, and confirmation.
      parameters:
      - description: OTP verification and new password details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserVerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "409":
          description: Conflict, password confirmation failed
          schema:
            $ref: '#/definitions/models.ConflictResponse'
        "422":
          description: Unprocessable entity, invalid input
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Set New User Password
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user in the system under a specific tenant. This
        endpoint is typically used for onboarding new users. Requires all mandatory
        fields such as name, email, and password.
      parameters:
      - description: User registration details including name, email, and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "409":
          description: Conflict, user already exists
          schema:
            $ref: '#/definitions/models.ConflictResponse'
        "422":
          description: Unprocessable entity, invalid input
          schema:
            $ref: '#/definitions/models.StatusUnprocessableEntityResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      summary: Register New User
      tags:
      - User
  /users:
    get:
      description: Fetches a paginated list of all users in the system. This endpoint
        is typically used by admins to view and manage users. Returns user details
        with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Users list successfully retrieved with pagination
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List All Users
      tags:
      - User
  /users/{id}/disable:
    put:
      description: Disables a user account, preventing them from accessing the system.
        Only users with sufficient privileges can perform this action.
      parameters:
      - description: Unique identifier of the user to disable
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User account disabled successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Disable User Account
      tags:
      - User
  /users/{id}/enable:
    put:
      description: Enables a previously disabled user account, allowing them to access
        the system again. Only users with sufficient privileges can perform this action.
      parameters:
      - description: Unique identifier of the user to enable
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User account enabled successfully
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "400":
          description: Bad request, missing required fields
          schema:
            $ref: '#/definitions/models.BadRequestResponse'
        "401":
          description: Unauthorized, invalid or missing authentication
          schema:
            $ref: '#/definitions/models.UnauthorizedResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ServiceResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Enable User Account
      tags:
      - User
swagger: "2.0"
