{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token and success message",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials or missing fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Error while parsing the request body",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Logs out the logged in user and invalidates its existing token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout the user",
                "responses": {
                    "200": {
                        "description": "Refreshed JWT token and success message",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieves all roles from the system. Optionally, you can filter roles by type using the 'type' query parameter. If not provided, the default type is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List all roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role type to filter (e.g., 'admin', 'user', 'default'). If not provided, defaults to 'default'.",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles fetched successfully. Data contains the list of roles.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while fetching roles.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/": {
            "post": {
                "description": "Creates a new custom role with specified routes. Requires a unique role name and a list of routes. Returns 422 if the request is invalid, 500 for internal errors.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create custom role",
                "parameters": [
                    {
                        "description": "Create Custom Role Request. Requires 'roleName' and 'routes' fields.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCustomRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if 'roleName' or 'routes' are missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while creating the role.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/:id/permissions": {
            "put": {
                "description": "Adds or removes permissions from a role. Requires role name and lists of permissions to add or remove. Returns 422 if the request is invalid, 500 for internal errors.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update role permissions",
                "parameters": [
                    {
                        "description": "Update Role Permissions Request. Requires 'roleName', 'addPermisions', and 'removePermissions'.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRolePermissions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role permissions updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if required fields are missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while updating permissions.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/verify": {
            "post": {
                "description": "Verifies if a role exists by roleId and roleName. Returns 404 if either is missing or not found, 422 if the request body is invalid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Verify role",
                "parameters": [
                    {
                        "description": "Verify Role Request. Requires both 'roleId' and 'roleName'.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role verified successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if either 'roleId' or 'roleName' is missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while verifying the role.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "delete": {
                "description": "Deletes a custom role by its ID. Only custom roles can be deleted; system roles are protected. Any users currently assigned this role will need to be reassigned before deletion.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete custom role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID to delete. Must be a valid UUID format.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if the 'id' path parameter is missing, empty, or not a valid UUID format.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. This occurs if the role is currently assigned to users and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while deleting the role.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/disable": {
            "put": {
                "description": "Disables a role by its ID, preventing it from being assigned to new users. Existing users with this role will retain it but new assignments are blocked. System roles cannot be disabled.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Disable role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID to disable. Must be a valid UUID format.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role disabled successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if the 'id' path parameter is missing, empty, or not a valid UUID format.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. This occurs if the role is already disabled.",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while disabling the role.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/enable": {
            "put": {
                "description": "Enables a role by its ID, making it available for assignment to users. Only disabled roles can be enabled. System roles are always enabled by default.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Enable role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID to enable. Must be a valid UUID format.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role enabled successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if the 'id' path parameter is missing, empty, or not a valid UUID format.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. This occurs if the role is already enabled.",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while enabling the role.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/permissions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all routes and permissions associated with a specific role by role ID. This is useful for role management and permission auditing. Returns detailed permission structure including HTTP methods and route information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get role permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID to retrieve permissions for. Must be a valid UUID format.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role permissions retrieved successfully. Data contains the detailed permission structure.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if the 'id' path parameter is missing, empty, or not a valid UUID format.",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while retrieving role permissions.",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the details of the user currently authenticated via the API key or token. This endpoint is useful for profile pages or user dashboards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Authenticated User Details",
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the authenticated user to update their profile information such as name, email, or other editable fields. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update Authenticated User Details",
                "parameters": [
                    {
                        "description": "Fields to update for the user profile",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/password/reset": {
            "post": {
                "description": "Initiates the password reset process for a user by sending a reset link or OTP to the user's email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Reset User Password",
                "parameters": [
                    {
                        "description": "Password reset request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset initiated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/password/set": {
            "post": {
                "description": "Sets a new password for the user after verifying the OTP sent to their email. Requires email, OTP, new password, and confirmation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Set New User Password",
                "parameters": [
                    {
                        "description": "OTP verification and new password details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserVerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict, password confirmation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Registers a new user in the system under a specific tenant. This endpoint is typically used for onboarding new users. Requires all mandatory fields such as name, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register New User",
                "parameters": [
                    {
                        "description": "User registration details including name, email, and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict, user already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ConflictResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the details of a user by their unique user ID. This endpoint is typically used by admins or services that need to look up users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the user to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user from the system using their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}/role": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Assigns a specific role to a user identified by their user ID. Only users with sufficient privileges (e.g., admins) can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Assign Role to User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the user to assign a role",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role assignment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.StatusUnprocessableEntityResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of all users in the system. This endpoint is typically used by admins to view and manage users. Returns user details with pagination support.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List All Users",
                "responses": {
                    "200": {
                        "description": "Users list successfully retrieved with pagination",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/disable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Disables a user account, preventing them from accessing the system. Only users with sufficient privileges can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Disable User Account",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier of the user to disable",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account disabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/enable": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Enables a previously disabled user account, allowing them to access the system again. Only users with sufficient privileges can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Enable User Account",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier of the user to enable",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account enabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AssignRoleRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "models.BadRequestResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad request. Missing or invalid required fields."
                }
            }
        },
        "models.ConflictResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "message": {
                    "type": "string",
                    "example": "Conflict. Resource already exists or operation conflicts with current state."
                }
            }
        },
        "models.CreateCustomRole": {
            "type": "object",
            "properties": {
                "Permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.InternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "Internal server error occurred."
                }
            }
        },
        "models.Permission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "route": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.ServiceResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "models.StatusUnprocessableEntityResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 422
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request body format. Please check your JSON syntax and field types."
                }
            }
        },
        "models.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Unauthorized access. Please provide valid authentication credentials."
                }
            }
        },
        "models.UpdateRolePermissions": {
            "type": "object",
            "properties": {
                "add_permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "remove_permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.UserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.UserVerifyOTPRequest": {
            "type": "object",
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "models.VerifyRoleRequest": {
            "type": "object",
            "properties": {
                "role_id": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        }
    }
}