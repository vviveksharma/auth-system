{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token and success message",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials or missing fields",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "502": {
                        "description": "Error while parsing the request body",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Refreshes and returns a new JWT token for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT Token",
                "responses": {
                    "200": {
                        "description": "Refreshed JWT token and success message",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieves all roles from the system. Optionally, you can filter roles by type using the 'type' query parameter. If not provided, the default type is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List all roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role type to filter (e.g., 'admin', 'user', 'default'). If not provided, defaults to 'default'.",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles fetched successfully. Data contains the list of roles.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while fetching roles.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/roles/custom": {
            "post": {
                "description": "Creates a new custom role with specified routes. Requires a unique role name and a list of routes. Returns 422 if the request is invalid, 500 for internal errors.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create custom role",
                "parameters": [
                    {
                        "description": "Create Custom Role Request. Requires 'roleName' and 'routes' fields.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCustomRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if 'roleName' or 'routes' are missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while creating the role.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/roles/permissions": {
            "put": {
                "description": "Adds or removes permissions from a role. Requires role name and lists of permissions to add or remove. Returns 422 if the request is invalid, 500 for internal errors.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update role permissions",
                "parameters": [
                    {
                        "description": "Update Role Permissions Request. Requires 'roleName', 'addPermisions', and 'removePermissions'.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRolePermissions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role permissions updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. This occurs if required fields are missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This occurs if there is an unexpected error while updating permissions.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/roles/verify": {
            "post": {
                "description": "Verifies if a role exists by roleId and roleName. Returns 404 if either is missing or not found, 422 if the request body is invalid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Verify role",
                "parameters": [
                    {
                        "description": "Verify Role Request. Requires both 'roleId' and 'roleName'.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role exists. Data contains verification result.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found or missing required fields. This occurs if either 'roleId' or 'roleName' is missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity. This occurs if the request body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the details of the user currently authenticated via the API key or token. This endpoint is useful for profile pages or user dashboards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Authenticated User Details",
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the authenticated user to update their profile information such as name, email, or other editable fields. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update Authenticated User Details",
                "parameters": [
                    {
                        "description": "Fields to update for the user profile",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/password/reset": {
            "post": {
                "description": "Initiates the password reset process for a user by sending a reset link or OTP to the user's email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Reset User Password",
                "parameters": [
                    {
                        "description": "Password reset request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset initiated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/password/set": {
            "post": {
                "description": "Sets a new password for the user after verifying the OTP sent to their email. Requires email, OTP, new password, and confirmation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Set New User Password",
                "parameters": [
                    {
                        "description": "OTP verification and new password details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserVerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict, password confirmation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Registers a new user in the system under a specific tenant. This endpoint is typically used for onboarding new users. Requires all mandatory fields such as name, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register New User",
                "parameters": [
                    {
                        "description": "User registration details including name, email, and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict, user already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the details of a user by their unique user ID. This endpoint is typically used by admins or services that need to look up users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the user to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}/role": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Assigns a specific role to a user identified by their user ID. Only users with sufficient privileges (e.g., admins) can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Assign Role to User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the user to assign a role",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role assignment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, invalid or missing authentication",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity, invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AssignRoleRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "models.CreateCustomRole": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.ServiceResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateRolePermissions": {
            "type": "object",
            "properties": {
                "add_permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remove_permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.UserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserVerifyOTPRequest": {
            "type": "object",
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "models.VerifyRoleRequest": {
            "type": "object",
            "properties": {
                "role_id": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        }
    }
}